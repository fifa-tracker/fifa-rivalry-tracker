name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 46.62.134.177
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Navigate to the project directory (create if it doesn't exist)
          cd ~/fifa-rivalry-tracker || mkdir -p ~/fifa-rivalry-tracker && cd ~/fifa-rivalry-tracker
          
          # Clone or pull the latest code
          if [ -d ".git" ]; then
            echo "Repository exists, pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
          else
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # Create .env file with secrets
          echo "Creating .env file with secrets..."
          cat > .env << EOF
          ENVIRONMENT=production
          MONGO_URI=${{ secrets.MONGO_URI }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          LOG_LEVEL=INFO
          EOF
          
          # Verify .env file was created and has content
          echo "Verifying .env file..."
          if [ -f ".env" ]; then
            echo "✅ .env file created successfully"
            echo "File contents (without values):"
            cat .env | sed 's/=.*/=***/' || echo "Could not display file contents"
          else
            echo "❌ .env file was not created"
            exit 1
          fi
          
          # Test environment variable loading
          echo "Testing environment variable loading..."
          python3 scripts/test_env.py || echo "Warning: Could not run environment test"
          
          # Stop and remove ALL existing containers, networks, and volumes
          echo "Stopping and removing ALL existing containers..."
          docker compose down --remove-orphans --volumes --rmi all || true
          
          # Force stop and remove any containers that might still be running
          echo "Force stopping any remaining containers..."
          docker stop $(docker ps -aq) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          
          # Remove all unused containers, networks, images, and volumes
          echo "Cleaning up all unused Docker resources..."
          docker system prune -a --volumes -f || true
          
          # Remove any dangling images specifically
          echo "Removing dangling images..."
          docker image prune -a -f || true
          
          # Build and start the application with force rebuild and no cache
          echo "Building and starting application with fresh build..."
          docker compose up -d --build --force-recreate --no-deps
          
          # Wait a moment for the application to start
          sleep 20
          
          # Check if the application is running
          echo "Checking application status..."
          if curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Application deployed successfully!"
            echo "Container status:"
            docker compose ps
          else
            echo "❌ Application deployment failed!"
            echo "Container logs:"
            docker compose logs
            echo "Container status:"
            docker compose ps
            echo "All running containers:"
            docker ps -a
            exit 1
          fi
          
          # Final cleanup of old images to save space
          echo "Final cleanup of old Docker images..."
          docker image prune -f